{"version":3,"sources":["streamlit/streamlit.ts","streamlit/ArrowTable.ts","streamlit/StreamlitReact.tsx","StreamlitCropper.tsx","index.tsx"],"names":["ComponentMessageType","ArrowTable","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","this","Table","from","caption","styles","undefined","length","numCols","rows","dataRows","columns","dataColumns","schema","fields","typeId","nanos","Date","Streamlit","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","value","SET_COMPONENT_VALUE","event","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","eventData","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","key","toArrowTable","Object","fromEntries","df","index","parent","postMessage","isStreamlitMessage","React","PureComponent","withStreamlitConnection","WrappedComponent","ComponentWrapper","props","componentDidMount","onRenderEvent","componentDidUpdate","state","componentError","componentWillUnmount","removeEventListener","renderEvent","setState","renderData","render","message","width","innerWidth","getDerivedStateFromError","hoistNonReactStatics","useState","fabric","Canvas","canvas","setCanvas","canvasWidth","canvasHeight","imageData","invisCanvas","createElement","ctx","getContext","idata","createImageData","set","putImageData","dataUri","toDataURL","useEffect","rectTop","rectLeft","rectWidth","rectHeight","boxColor","lockAspect","enableRetinaScaling","backgroundImage","uniScaleTransform","rect","Rect","left","top","fill","objectCaching","stroke","strokeWidth","hasRotatingPoint","add","realtimeUpdate","handleEvent","renderAll","coords","getObjects","getBoundingRect","on","off","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e6639db.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2020 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\"\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\n\n/** Data sent in the custom Streamlit render event. */\nexport interface RenderData {\n  args: any\n  disabled: boolean\n}\n\n/** Messages from Component -> Streamlit */\nenum ComponentMessageType {\n  // A component sends this message when it's ready to receive messages\n  // from Streamlit. Streamlit won't send any messages until it gets this.\n  // Data: { apiVersion: number }\n  COMPONENT_READY = \"streamlit:componentReady\",\n\n  // The component has a new widget value. Send it back to Streamlit, which\n  // will then re-run the app.\n  // Data: { value: any }\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\n\n  // The component has a new height for its iframe.\n  // Data: { height: number }\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\n}\n\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nexport class Streamlit {\n  /**\n   * The Streamlit component API version we're targetting.\n   * There's currently only 1!\n   */\n  public static readonly API_VERSION = 1\n\n  public static readonly RENDER_EVENT = \"streamlit:render\"\n\n  /** Dispatches events received from Streamlit. */\n  public static readonly events = new EventTarget()\n\n  private static registeredMessageListener = false\n  private static lastFrameHeight?: number\n\n  /**\n   * Tell Streamlit that the component is ready to start receiving data.\n   * Streamlit will defer emitting RENDER events until it receives the\n   * COMPONENT_READY message.\n   */\n  public static setComponentReady = (): void => {\n    if (!Streamlit.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\n      Streamlit.registeredMessageListener = true\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: Streamlit.API_VERSION,\n    })\n  }\n\n  /**\n   * Report the component's height to Streamlit.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n  public static setFrameHeight = (height?: number): void => {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight\n    }\n\n    if (height === Streamlit.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return\n    }\n\n    Streamlit.lastFrameHeight = height\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\n  }\n\n  /**\n   * Set the component's value. This value will be returned to the Python\n   * script, and the script will be re-run.\n   *\n   * For example:\n   *\n   * JavaScript:\n   * Streamlit.setComponentValue(\"ahoy!\")\n   *\n   * Python:\n   * value = st.my_component(...)\n   * st.write(value) # -> \"ahoy!\"\n   *\n   * The value must be serializable into JSON.\n   */\n  public static setComponentValue = (value: any): void => {\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, { value })\n  }\n\n  /** Receive a ForwardMsg from the Streamlit app */\n  private static onMessageEvent = (event: MessageEvent): void => {\n    const type = event.data[\"type\"]\n    switch (type) {\n      case Streamlit.RENDER_EVENT:\n        Streamlit.onRenderMessage(event.data)\n        break\n    }\n  }\n\n  /**\n   * Handle an untyped Streamlit render event and redispatch it as a\n   * StreamlitRenderEvent.\n   */\n  private static onRenderMessage = (data: any): void => {\n    let args = data[\"args\"]\n    if (args == null) {\n      console.error(\n        `Got null args in onRenderMessage. This should never happen`\n      )\n      args = {}\n    }\n\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\n    const dataframeArgs =\n      data[\"dfs\"] && data[\"dfs\"].length > 0\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n        : {}\n\n    args = {\n      ...args,\n      ...dataframeArgs,\n    }\n\n    const disabled = Boolean(data[\"disabled\"])\n\n    // Dispatch a render event!\n    const eventData = { disabled, args }\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\n      detail: eventData,\n    })\n    Streamlit.events.dispatchEvent(event)\n  }\n\n  private static argsDataframeToObject = (\n    argsDataframe: ArgsDataframe[]\n  ): object => {\n    const argsDataframeArrow = argsDataframe.map(\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\n    )\n    return Object.fromEntries(argsDataframeArrow)\n  }\n\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\n    const { data, index, columns } = df.data\n    return new ArrowTable(data, index, columns)\n  }\n\n  /** Post a message to the Streamlit app. */\n  private static sendBackMsg = (type: string, data?: any): void => {\n    window.parent.postMessage(\n      {\n        isStreamlitMessage: true,\n        type: type,\n        ...data,\n      },\n      \"*\"\n    )\n  }\n}\n\ninterface ArgsDataframe {\n  key: string\n  value: ArrowDataframeProto\n}\n","/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Table, Type } from \"apache-arrow\"\n\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\n\nexport interface ArrowDataframeProto {\n  data: ArrowTableProto\n  height: string\n  width: string\n}\n\nexport interface ArrowTableProto {\n  data: Uint8Array\n  index: Uint8Array\n  columns: Uint8Array\n  styler: Styler\n}\n\ninterface Cell {\n  classNames: string\n  content: string\n  id?: string\n  type: CellType\n}\n\ninterface Styler {\n  caption?: string\n  displayValuesTable: Table\n  styles?: string\n  uuid: string\n}\n\nexport class ArrowTable {\n  private readonly dataTable: Table\n  private readonly indexTable: Table\n  private readonly columnsTable: Table\n  private readonly styler?: Styler\n\n  constructor(\n    dataBuffer: Uint8Array,\n    indexBuffer: Uint8Array,\n    columnsBuffer: Uint8Array,\n    styler?: any\n  ) {\n    this.dataTable = Table.from(dataBuffer)\n    this.indexTable = Table.from(indexBuffer)\n    this.columnsTable = Table.from(columnsBuffer)\n    this.styler = styler\n      ? {\n          caption: styler.get(\"caption\"),\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\n          styles: styler.get(\"styles\"),\n          uuid: styler.get(\"uuid\"),\n        }\n      : undefined\n  }\n\n  get rows(): number {\n    return this.indexTable.length + this.columnsTable.numCols\n  }\n\n  get columns(): number {\n    return this.indexTable.numCols + this.columnsTable.length\n  }\n\n  get headerRows(): number {\n    return this.rows - this.dataRows\n  }\n\n  get headerColumns(): number {\n    return this.columns - this.dataColumns\n  }\n\n  get dataRows(): number {\n    return this.dataTable.length\n  }\n\n  get dataColumns(): number {\n    return this.dataTable.numCols\n  }\n\n  get uuid(): string | undefined {\n    return this.styler && this.styler.uuid\n  }\n\n  get caption(): string | undefined {\n    return this.styler && this.styler.caption\n  }\n\n  get styles(): string | undefined {\n    return this.styler && this.styler.styles\n  }\n\n  get table(): Table {\n    return this.dataTable\n  }\n\n  get index(): Table {\n    return this.indexTable\n  }\n\n  get columnTable(): Table {\n    return this.columnsTable\n  }\n\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\n    const isBlankCell =\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\n    const isIndexCell =\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\n    const isColumnsCell =\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\n\n    if (isBlankCell) {\n      const classNames = [\"blank\"]\n      if (columnIndex > 0) {\n        classNames.push(\"level\" + rowIndex)\n      }\n\n      return {\n        type: \"blank\",\n        classNames: classNames.join(\" \"),\n        content: \"\",\n      }\n    } else if (isColumnsCell) {\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"col_heading\",\n        \"level\" + rowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n\n      return {\n        type: \"columns\",\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\n      }\n    } else if (isIndexCell) {\n      const dataRowIndex = rowIndex - this.headerRows\n      const classNames = [\n        \"row_heading\",\n        \"level\" + columnIndex,\n        \"row\" + dataRowIndex,\n      ]\n\n      return {\n        type: \"index\",\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\n      }\n    } else {\n      const dataRowIndex = rowIndex - this.headerRows\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"data\",\n        \"row\" + dataRowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n      const content = this.styler\n        ? this.getContent(\n            this.styler.displayValuesTable,\n            dataRowIndex,\n            dataColumnIndex\n          )\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\n\n      return {\n        type: \"data\",\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n        classNames: classNames.join(\" \"),\n        content,\n      }\n    }\n  }\n\n  public getContent = (\n    table: Table,\n    rowIndex: number,\n    columnIndex: number\n  ): any => {\n    const column = table.getColumnAt(columnIndex)\n    if (column === null) {\n      return \"\"\n    }\n\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\n    switch (columnTypeId) {\n      case Type.Timestamp: {\n        return this.nanosToDate(column.get(rowIndex))\n      }\n      default: {\n        return column.get(rowIndex)\n      }\n    }\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\n    return table.schema.fields[columnIndex].type.typeId\n  }\n\n  private nanosToDate(nanos: number): Date {\n    return new Date(nanos / 1e6)\n  }\n}\n","import hoistNonReactStatics from \"hoist-non-react-statics\"\nimport React, { ReactNode } from \"react\"\nimport { RenderData, Streamlit } from \"./streamlit\"\n\n/**\n * Props passed to custom Streamlit components.\n */\nexport interface ComponentProps {\n  /** Named dictionary of arguments passed from Python. */\n  args: any\n\n  /** The component's width. */\n  width: number\n\n  /**\n   * True if the component should be disabled.\n   * All components get disabled while the app is being re-run,\n   * and become re-enabled when the re-run has finished.\n   */\n  disabled: boolean\n}\n\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nexport class StreamlitComponentBase<S = {}> extends React.PureComponent<\n  ComponentProps,\n  S\n> {\n  public componentDidMount(): void {\n    // After we're rendered for the first time, tell Streamlit that our height\n    // has changed.\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidUpdate(): void {\n    // After we're updated, tell Streamlit that our height may have changed.\n    Streamlit.setFrameHeight()\n  }\n}\n\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(\n  WrappedComponent: React.ComponentType<ComponentProps>\n): React.ComponentType {\n  interface WrapperProps {}\n\n  interface WrapperState {\n    renderData?: RenderData\n    componentError?: Error\n  }\n\n  class ComponentWrapper extends React.PureComponent<\n    WrapperProps,\n    WrapperState\n  > {\n    public constructor(props: WrapperProps) {\n      super(props)\n      this.state = {\n        renderData: undefined,\n        componentError: undefined,\n      }\n    }\n\n    /**\n     * Error boundary function. This will be called if our wrapped\n     * component throws an error. We store the caught error in our state,\n     * and display it in the next render().\n     */\n    public static getDerivedStateFromError = (\n      error: Error\n    ): Partial<WrapperState> => {\n      return { componentError: error }\n    }\n\n    public componentDidMount = (): void => {\n      // Set up event listeners, and signal to Streamlit that we're ready.\n      // We won't render the component until we receive the first RENDER_EVENT.\n      Streamlit.events.addEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n      Streamlit.setComponentReady()\n    }\n\n    public componentDidUpdate = (): void => {\n      // If our child threw an error, we display it in render(). In this\n      // case, the child won't be mounted and therefore won't call\n      // `setFrameHeight` on its own. We do it here so that the rendered\n      // error will be visible.\n      if (this.state.componentError != null) {\n        Streamlit.setFrameHeight()\n      }\n    }\n\n    public componentWillUnmount = (): void => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n    }\n\n    /**\n     * Streamlit is telling this component to redraw.\n     * We save the render data in State, so that it can be passed to the\n     * component in our own render() function.\n     */\n    private onRenderEvent = (event: Event): void => {\n      // Update our state with the newest render data\n      const renderEvent = event as CustomEvent<RenderData>\n      this.setState({ renderData: renderEvent.detail })\n    }\n\n    public render = (): ReactNode => {\n      // If our wrapped component threw an error, display it.\n      if (this.state.componentError != null) {\n        return (\n          <div>\n            <h1>Component Error</h1>\n            <span>{this.state.componentError.message}</span>\n          </div>\n        )\n      }\n\n      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n      if (this.state.renderData == null) {\n        return null\n      }\n\n      return (\n        <WrappedComponent\n          width={window.innerWidth}\n          disabled={this.state.renderData.disabled}\n          args={this.state.renderData.args}\n        />\n      )\n    }\n  }\n\n  return hoistNonReactStatics(ComponentWrapper, WrappedComponent)\n}\n","import React, {useEffect, useState} from 'react';\nimport {ComponentProps, Streamlit, withStreamlitConnection} from \"./streamlit\";\nimport {fabric} from 'fabric';\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    rectTop: number\n    rectLeft: number\n    rectWidth: number\n    rectHeight: number\n    realtimeUpdate: boolean\n    boxColor: string\n    imageData: Uint8ClampedArray\n    lockAspect: boolean\n}\n\n\nconst StreamlitCropper = (props: ComponentProps) => {\n    const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\n    const {canvasWidth, canvasHeight, imageData}: PythonArgs = props.args\n    /*\n    * Translate Python image data to a JavaScript Image\n    */\n    var invisCanvas = document.createElement(\"canvas\")\n    var ctx = invisCanvas.getContext('2d')\n\n    invisCanvas.width = canvasWidth\n    invisCanvas.height = canvasHeight\n\n    // create imageData object\n    if (ctx) {\n    var idata = ctx.createImageData(canvasWidth, canvasHeight);\n\n    // set our buffer as source\n    idata.data.set(imageData);\n\n    // update canvas with new data\n    ctx.putImageData(idata, 0, 0);\n    var dataUri = invisCanvas.toDataURL()\n    }\n    else {\n        // eslint-disable-next-line\n        var dataUri = \"\"\n    }\n    \n    /**\n     * Initialize canvas on mount and add a rectangle\n     */\n    useEffect  (() => {\n        const {rectTop, rectLeft, rectWidth, rectHeight, boxColor, lockAspect}: PythonArgs = props.args\n        const canvas = new fabric.Canvas('c', {\n            enableRetinaScaling: false,\n            backgroundImage: dataUri,\n            uniScaleTransform: lockAspect\n        })\n\n        var rect = new fabric.Rect({\n            left: rectLeft,\n            top: rectTop,\n            fill: '',\n            width: rectWidth,\n            height: rectHeight,\n            objectCaching: true,\n            stroke: boxColor,\n            strokeWidth: 3,\n            hasRotatingPoint: false\n\n          });\n        canvas.add(rect)\n\n        setCanvas(canvas)\n        Streamlit.setFrameHeight()\n        // eslint-disable-next-line\n    }, [canvasHeight, canvasWidth]);\n\n\n    /**\n     * On update (either realtime or doubleclick), send the coordinates of the rectangle\n     * back to streamlit.\n     */\n    useEffect(() => {\n        const {realtimeUpdate}: PythonArgs = props.args\n        if (!canvas) {\n            return;\n        }\n        const handleEvent = () => {\n            canvas.renderAll()\n            const coords = canvas.getObjects()[0].getBoundingRect()\n            Streamlit.setComponentValue({coords:coords})\n        }\n        \n        if (realtimeUpdate) {\n        canvas.on(\"object:modified\", handleEvent)\n        return () => {\n            canvas.off(\"object:modified\");\n        }\n        }\n        else {\n        canvas.on(\"mouse:dblclick\", handleEvent)\n        return () => {\n            canvas.off(\"mouse:dblclick\");\n        }\n        }\n    })\n\n    return (\n        <>\n            <canvas id=\"c\" width={canvasWidth} height={canvasHeight}/>\n        </>\n    )\n};\n\nexport default withStreamlitConnection(StreamlitCropper);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitCropper from \"./StreamlitCropper\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitCropper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}